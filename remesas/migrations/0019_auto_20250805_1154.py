# Generated by Django 5.2.4 on 2025-08-05 15:54

from django.db import migrations
from datetime import datetime
import random


def generar_id_pago_migracion(tipo_pago='transferencia'):
    """Genera un ID único para el pago durante la migración"""
    ahora = datetime.now()
    mes = f"{ahora.month:02d}"
    dia = f"{ahora.day:02d}"
    # Generar número aleatorio de 3 dígitos
    numero_aleatorio = f"{random.randint(100, 999)}"
    hora = f"{ahora.hour:02d}{ahora.minute:02d}{ahora.second:02d}"
    # T para transferencia, E para efectivo
    tipo_letra = 'T' if tipo_pago == 'transferencia' else 'E'
    return f"PAGO-{mes}/{dia}-{tipo_letra}{numero_aleatorio}-{hora}"


def asignar_ids_a_pagos_existentes(apps, schema_editor):
    """Asigna IDs únicos a todos los pagos existentes"""
    Pago = apps.get_model('remesas', 'Pago')
    
    for pago in Pago.objects.filter(pago_id__isnull=True):
        # Generar ID único, verificando que no exista
        while True:
            nuevo_id = generar_id_pago_migracion(pago.tipo_pago)
            if not Pago.objects.filter(pago_id=nuevo_id).exists():
                pago.pago_id = nuevo_id
                break
        pago.save()


def revertir_ids_pagos(apps, schema_editor):
    """Revierte los IDs de los pagos (para rollback)"""
    Pago = apps.get_model('remesas', 'Pago')
    Pago.objects.all().update(pago_id=None)


class Migration(migrations.Migration):

    dependencies = [
        ('remesas', '0018_pago_comprobante_pago_pago_observaciones_and_more'),
    ]

    operations = [
        migrations.RunPython(asignar_ids_a_pagos_existentes, revertir_ids_pagos),
    ]
